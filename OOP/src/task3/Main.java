package task3;

import java.io.*;
import java.util.*;
/**
 * –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –æ–±—á–∏—Å–ª–µ–Ω—å
 */
interface ResultDisplay {
    void displayBasic(Data data);
}

/**
 * –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ñ–∞–±—Ä–∏–∫–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 */
interface DisplayFactory {
    ResultDisplay createDisplay();
}

/**
 * –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π –∫–ª–∞—Å —Ñ–∞–±—Ä–∏–∫–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 * –†–µ–∞–ª—ñ–∑—É—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å DisplayFactory
 */
abstract class ResultDisplayFactory implements DisplayFactory {
    /**
     * –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
     * @return –æ–±'—î–∫—Ç, —â–æ —Ä–µ–∞–ª—ñ–∑—É—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å ResultDisplay
     */
    public abstract ResultDisplay createDisplay();
}

/**
 * –ö–ª–∞—Å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É –∫–æ–Ω—Å–æ–ª—å
 * –†–µ–∞–ª—ñ–∑—É—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å ResultDisplay
 */
class ConsoleResultDisplay implements ResultDisplay {
    @Override
    public void displayBasic(Data data) {
        System.out.println("–ë–∞–∑–æ–≤–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—èüéâ:");
        System.out.println("–¢–∞–±–ª–∏—Ü—è —á–∏—Å–µ–ª:");
        data.printTable();
        System.out.println("–°—É–º–∞: " + data.getResult());
        System.out.println("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —á–∏—Å–µ–ª: " + data.getNumbers().size());
    }
}

/**
 * –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É –∫–æ–Ω—Å–æ–ª—å
 * –†–æ–∑—à–∏—Ä—é—î –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π –∫–ª–∞—Å ResultDisplayFactory
 */
class ConsoleResultDisplayFactory extends ResultDisplayFactory {
    /**
     * –°—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É –∫–æ–Ω—Å–æ–ª—å
     * @return –æ–±'—î–∫—Ç ConsoleResultDisplay
     */
    @Override
    public ResultDisplay createDisplay() {
        return new ConsoleResultDisplay();
    }
}

/**
 * –ö–ª–∞—Å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É —Ñ–∞–π–ª
 * –†–µ–∞–ª—ñ–∑—É—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å ResultDisplay
 */
class FileResultDisplay implements ResultDisplay {
    /**
     * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–∞–Ω—ñ —É —Ñ–∞–π–ª results.txt
     * @param data –¥–∞–Ω—ñ –¥–ª—è –∑–∞–ø–∏—Å—É —É —Ñ–∞–π–ª
     */
    @Override
    public void displayBasic(Data data) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("results.txt"))) {
            writer.write("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–±—á–∏—Å–ª–µ–Ω—å:\n");
            writer.write("–¢–∞–±–ª–∏—Ü—è —á–∏—Å–µ–ª:\n");
            data.printTable(writer);
            writer.write("–°—É–º–∞: " + data.getResult());
            writer.newLine();
            writer.write("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —á–∏—Å–µ–ª: " + data.getNumbers().size());
        } catch (IOException e) {
            System.err.println("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É —Ñ–∞–π–ª: " + e.getMessage());
        }
    }
}

/**
 * –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É —Ñ–∞–π–ª
 * –†–æ–∑—à–∏—Ä—é—î –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∏–π –∫–ª–∞—Å ResultDisplayFactory
 */
class FileResultDisplayFactory extends ResultDisplayFactory {
    @Override
    public ResultDisplay createDisplay() {
        return new FileResultDisplay();
    }
}

/**
 * –ö–ª–∞—Å –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö
 * –†–µ–∞–ª—ñ–∑—É—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å Serializable –¥–ª—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
 */
class Data implements Serializable {
    private static final long serialVersionUID = 1L;
    private List<Integer> numbers; // –°–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
    private int result; // –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—á–∏—Å–ª–µ–Ω—å (—Å—É–º–∞)
    public Data(List<Integer> numbers) {
        this.numbers = new ArrayList<>(numbers);
        // –û–±—á–∏—Å–ª–µ–Ω–Ω—è —Å—É–º–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Stream API
        this.result = numbers.stream().mapToInt(Integer::intValue).sum();
    }

    /**
     * –ü–æ–≤–µ—Ä—Ç–∞—î –Ω–µ–∑–º—ñ–Ω–Ω–∏–π —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
     * @return –Ω–µ–∑–º—ñ–Ω–Ω–∏–π —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª
     */
    public List<Integer> getNumbers() { return Collections.unmodifiableList(numbers); }

    /**
     * –ü–æ–≤–µ—Ä—Ç–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—á–∏—Å–ª–µ–Ω—å (—Å—É–º—É)
     * @return —Å—É–º–∞ —á–∏—Å–µ–ª
     */
    public int getResult() { return result; }

    /**
     * –í–∏–≤–æ–¥–∏—Ç—å —Ç–∞–±–ª–∏—Ü—é —á–∏—Å–µ–ª —É –∫–æ–Ω—Å–æ–ª—å
     * –†–æ–∑–±–∏–≤–∞—î —á–∏—Å–ª–∞ –Ω–∞ —Ä—è–¥–∫–∏ –ø–æ 3 —á–∏—Å–ª–∞ –≤ –∫–æ–∂–Ω–æ–º—É
     */
    public void printTable() {
        for (int i = 0; i < numbers.size(); i++) {
            System.out.printf("%4d ", numbers.get(i));
            if ((i + 1) % 3 == 0) System.out.println();
        }
    }

    /**
     * –ó–∞–ø–∏—Å—É—î —Ç–∞–±–ª–∏—Ü—é —á–∏—Å–µ–ª —É —Ñ–∞–π–ª
     * –†–æ–∑–±–∏–≤–∞—î —á–∏—Å–ª–∞ –Ω–∞ —Ä—è–¥–∫–∏ –ø–æ 3 —á–∏—Å–ª–∞ –≤ –∫–æ–∂–Ω–æ–º—É
     * @param writer –æ–±'—î–∫—Ç BufferedWriter –¥–ª—è –∑–∞–ø–∏—Å—É —É —Ñ–∞–π–ª
     * @throws IOException —è–∫—â–æ –≤–∏–Ω–∏–∫–∞—î –ø–æ–º–∏–ª–∫–∞ –≤–≤–æ–¥—É/–≤–∏–≤–æ–¥—É
     */
    public void printTable(BufferedWriter writer) throws IOException {
        for (int i = 0; i < numbers.size(); i++) {
            writer.write(String.format("%4d ", numbers.get(i)));
            if ((i + 1) % 3 == 0) writer.newLine();
        }
    }

    /**
     * –°—Ç–∞—Ç–∏—á–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ñ–∞–π–ª—É
     * @param filename —ñ–º'—è —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
     * @return –Ω–æ–≤–∏–π –æ–±'—î–∫—Ç Data –∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
     */
    public static Data loadDataFromFile(String filename) {
        List<Integer> numbers = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
            String line;
            while ((line = reader.readLine()) != null) {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ —î —Ä—è–¥–æ–∫ —Ä—è–¥–∫–æ–º –∑ –ø—ñ–¥—Å—É–º–∫–æ–º
                if (!line.startsWith("–°—É–º–∞:")) {
                    String[] nums = line.split(" ");
                    for (String num : nums) {
                        if (!num.trim().isEmpty()) {
                            numbers.add(Integer.parseInt(num.trim()));
                        }
                    }
                }
            }
        } catch (IOException e) {
            System.err.println("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ñ–∞–π–ª—É: " + e.getMessage());
        }
        return new Data(numbers);
    }

    /**
     * –û–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ –∑ —Ñ–∞–π–ª—É, –∑–∞–º—ñ–Ω—é—é—á–∏ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ
     * @param filename —ñ–º'—è —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
     */
    public void updateDataFromFile(String filename) {
        List<Integer> newNumbers = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
            String line;
            while ((line = reader.readLine()) != null) {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ —î —Ä—è–¥–æ–∫ —Ä—è–¥–∫–æ–º –∑ –ø—ñ–¥—Å—É–º–∫–æ–º
                if (!line.startsWith("–°—É–º–∞:")) {
                    String[] nums = line.split(" ");
                    for (String num : nums) {
                        if (!num.trim().isEmpty()) {
                            newNumbers.add(Integer.parseInt(num.trim()));
                        }
                    }
                }
            }

            this.numbers = newNumbers;

            // –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ –Ω–æ–≤—É —Å—É–º—É –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            this.result = this.numbers.stream().mapToInt(Integer::intValue).sum();
        } catch (IOException e) {
            System.err.println("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ñ–∞–π–ª—É: " + e.getMessage());
        }
    }
}

/**
 * –ö–ª–∞—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö —ñ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
 */
class Calculator {
    private Data data; // –î–∞–Ω—ñ –¥–ª—è –æ–±—Ä–æ–±–∫–∏
    private ResultDisplayFactory displayFactory; // –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
     * @param numbers —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –¥–ª—è –æ–±—Ä–æ–±–∫–∏
     * @param displayFactory —Ñ–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
     */
    public Calculator(List<Integer> numbers, ResultDisplayFactory displayFactory) {
        this.data = new Data(numbers);
        this.displayFactory = displayFactory;
    }

    /**
     * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–±—á–∏—Å–ª–µ–Ω—å
     */
    public void displayResults() {
        ResultDisplay display = displayFactory.createDisplay();
        display.displayBasic(data);
    }

    /**
     * –ó–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ —É —Ñ–∞–π–ª
     * @param filename —ñ–º'—è —Ñ–∞–π–ª—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
     */
    public void saveData(String filename) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename))) {
            for (Integer num : data.getNumbers()) {
                writer.write(num + " ");
            }
            writer.newLine();
            writer.write("–°—É–º–∞: " + data.getResult());
            writer.newLine();
            System.out.println("–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.");
        } catch (IOException e) {
            System.err.println("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: " + e.getMessage());
        }
    }

    /**
     * –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –∑ —Ñ–∞–π–ª—É
     * @param filename —ñ–º'—è —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
     */
    public void loadData(String filename) {
        this.data = Data.loadDataFromFile(filename);
    }

    /**
     * –û–Ω–æ–≤–ª—é—î –¥–∞–Ω—ñ –∑ —Ñ–∞–π–ª—É
     * @param filename —ñ–º'—è —Ñ–∞–π–ª—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
     */
    public void updateData(String filename) {
        this.data.updateDataFromFile(filename);
    }
}

/**
 * –ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å –ø—Ä–æ–≥—Ä–∞–º–∏
 */
public class Main {
    /**
     * –ì–æ–ª–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–∏
     * @param args –∞—Ä–≥—É–º–µ–Ω—Ç–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
     */
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Random random = new Random();
        List<Integer> numbers = new ArrayList<>();
        boolean running = true;

        // –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–∏
        while (running) {
            System.out.println("–ú–µ–Ω—é: 1 - –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —á–∏—Å–ª–∞, 2 - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏, 3 - –ó–±–µ—Ä–µ–≥—Ç–∏, 4 - –û–Ω–æ–≤–∏—Ç–∏, 5 - –í–∏–π—Ç–∏");
            int action = scanner.nextInt();
            switch (action) {
                case 1 -> {
                    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —á–∏—Å–µ–ª
                    numbers.clear();
                    for (int i = 0; i < 9; i++) {
                        numbers.add(random.nextInt(100));
                    }
                    System.out.print("–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ —á–∏—Å–ª–∞: ");
                    System.out.println(numbers);
                }
                case 2 -> {
                    // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É –∫–æ–Ω—Å–æ–ª—å
                    Calculator calculator = new Calculator(numbers, new ConsoleResultDisplayFactory());
                    calculator.displayResults();
                }
                case 3 -> {
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ —Ñ–∞–π–ª
                    Calculator calculator = new Calculator(numbers, new ConsoleResultDisplayFactory());
                    calculator.saveData("C:\\Users\\–ï–ª—è\\Desktop\\–û–û–ü\\OOP.Bohomaz.txt");
                }
                case 4 -> {
                    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ñ–∞–π–ª—É
                    Calculator calculator = new Calculator(numbers, new ConsoleResultDisplayFactory());
                    calculator.updateData("C:\\Users\\–ï–ª—è\\Desktop\\–û–û–ü\\OOP.Bohomaz.txt");
                    System.out.println("–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.");
                }
                case 5 -> running = false; // –í–∏—Ö—ñ–¥ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏
                default -> System.out.println("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞");
            }
        }
        scanner.close();
    }
}