package task3;

import java.io.*;
import java.util.*;

interface ResultDisplay {
    void displayBasic(Data data);
}

interface DisplayFactory {
    ResultDisplay createDisplay();
}

abstract class ResultDisplayFactory implements DisplayFactory {
    public abstract ResultDisplay createDisplay();
}

class ConsoleResultDisplay implements ResultDisplay {
    @Override
    public void displayBasic(Data data) {
        System.out.println("–ë–∞–∑–æ–≤–µ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—èüéâ:");
        System.out.println("–¢–∞–±–ª–∏—Ü—è —á–∏—Å–µ–ª:");
        data.printTable();
        System.out.println("–°—É–º–∞: " + data.getResult());
        System.out.println("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —á–∏—Å–µ–ª: " + data.getNumbers().size());

    }
}

class ConsoleResultDisplayFactory extends ResultDisplayFactory {
    @Override
    public ResultDisplay createDisplay() {
        return new ConsoleResultDisplay();
    }
}

class FileResultDisplay implements ResultDisplay {
    @Override
    public void displayBasic(Data data) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("results.txt"))) {
            writer.write("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–±—á–∏—Å–ª–µ–Ω—å:\n");
            writer.write("–¢–∞–±–ª–∏—Ü—è —á–∏—Å–µ–ª:\n");
            data.printTable(writer);
            writer.write("–°—É–º–∞: " + data.getResult());
            writer.newLine();
            writer.write("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —á–∏—Å–µ–ª: " + data.getNumbers().size());
        } catch (IOException e) {
            System.err.println("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É —Ñ–∞–π–ª: " + e.getMessage());
        }
    }
}

class FileResultDisplayFactory extends ResultDisplayFactory {
    @Override
    public ResultDisplay createDisplay() {
        return new FileResultDisplay();
    }
}

class Data implements Serializable {
    private static final long serialVersionUID = 1L;
    private List<Integer> numbers;
    private int result;

    public Data(List<Integer> numbers) {
        this.numbers = new ArrayList<>(numbers);
        this.result = numbers.stream().mapToInt(Integer::intValue).sum();
    }

    public List<Integer> getNumbers() { return Collections.unmodifiableList(numbers); }
    public int getResult() { return result; }

    public void printTable() {
        for (int i = 0; i < numbers.size(); i++) {
            System.out.printf("%4d ", numbers.get(i));
            if ((i + 1) % 3 == 0) System.out.println();
        }
    }

    public void printTable(BufferedWriter writer) throws IOException {
        for (int i = 0; i < numbers.size(); i++) {
            writer.write(String.format("%4d ", numbers.get(i)));
            if ((i + 1) % 3 == 0) writer.newLine();
        }
    }

    public static Data loadDataFromFile(String filename) {
        List<Integer> numbers = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
            String line;
            while ((line = reader.readLine()) != null) {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ —î —Ä—è–¥–æ–∫ —Ä—è–¥–∫–æ–º –∑ –ø—ñ–¥—Å—É–º–∫–æ–º
                if (!line.startsWith("–°—É–º–∞:")) {
                    String[] nums = line.split(" ");
                    for (String num : nums) {
                        if (!num.trim().isEmpty()) {
                            numbers.add(Integer.parseInt(num.trim()));
                        }
                    }
                }
            }
        } catch (IOException e) {
            System.err.println("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ñ–∞–π–ª—É: " + e.getMessage());
        }
        return new Data(numbers);
    }

    public void updateDataFromFile(String filename) {
        List<Integer> newNumbers = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
            String line;
            while ((line = reader.readLine()) != null) {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ —î —Ä—è–¥–æ–∫ —Ä—è–¥–∫–æ–º –∑ –ø—ñ–¥—Å—É–º–∫–æ–º
                if (!line.startsWith("–°—É–º–∞:")) {
                    String[] nums = line.split(" ");
                    for (String num : nums) {
                        if (!num.trim().isEmpty()) {
                            newNumbers.add(Integer.parseInt(num.trim()));
                        }
                    }
                }
            }

            // –ó–∞–º—ñ—Å—Ç—å –¥–æ–¥–∞–≤–∞–Ω–Ω—è, –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–º—ñ–Ω—é—î–º–æ —Å–ø–∏—Å–æ–∫
            this.numbers = newNumbers;

            // –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ –Ω–æ–≤—É —Å—É–º—É –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            this.result = this.numbers.stream().mapToInt(Integer::intValue).sum();
        } catch (IOException e) {
            System.err.println("–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ñ–∞–π–ª—É: " + e.getMessage());
        }
    }
}

class Calculator {
    private Data data;
    private ResultDisplayFactory displayFactory;

    public Calculator(List<Integer> numbers, ResultDisplayFactory displayFactory) {
        this.data = new Data(numbers);
        this.displayFactory = displayFactory;
    }

    public void displayResults() {
        ResultDisplay display = displayFactory.createDisplay();
        display.displayBasic(data);
    }

    public void saveData(String filename) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename))) {
            for (Integer num : data.getNumbers()) {
                writer.write(num + " ");
            }
            writer.newLine();
            writer.write("–°—É–º–∞: " + data.getResult());
            writer.newLine();
            System.out.println("–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.");
        } catch (IOException e) {
            System.err.println("–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: " + e.getMessage());
        }
    }

    public void loadData(String filename) {
        this.data = Data.loadDataFromFile(filename);
    }

    public void updateData(String filename) {
        this.data.updateDataFromFile(filename);
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Random random = new Random();
        List<Integer> numbers = new ArrayList<>();
        boolean running = true;

        while (running) {
            System.out.println("–ú–µ–Ω—é: 1 - –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —á–∏—Å–ª–∞, 2 - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏, 3 - –ó–±–µ—Ä–µ–≥—Ç–∏, 4 - –û–Ω–æ–≤–∏—Ç–∏, 5 - –í–∏–π—Ç–∏");
            int action = scanner.nextInt();
            switch (action) {
                case 1 -> {
                    numbers.clear();
                    for (int i = 0; i < 9; i++) {
                        numbers.add(random.nextInt(100));
                    }
                    System.out.print("–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ —á–∏—Å–ª–∞: ");
                    System.out.println(numbers);
                }
                case 2 -> {
                    Calculator calculator = new Calculator(numbers, new ConsoleResultDisplayFactory());
                    calculator.displayResults();
                }
                case 3 -> {
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –≤ —Ñ–∞–π–ª
                    Calculator calculator = new Calculator(numbers, new ConsoleResultDisplayFactory());
                    calculator.saveData("C:\\Users\\–ï–ª—è\\Desktop\\–û–û–ü\\OOP.Bohomaz.txt");
                }
                case 4 -> {
                    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ñ–∞–π–ª—É
                    Calculator calculator = new Calculator(numbers, new ConsoleResultDisplayFactory());
                    calculator.updateData("C:\\Users\\–ï–ª—è\\Desktop\\–û–û–ü\\OOP.Bohomaz.txt");
                    System.out.println("–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.");
                }
                case 5 -> running = false;
                default -> System.out.println("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞");
            }
        }
        scanner.close();
    }
}